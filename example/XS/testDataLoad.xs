void code(string xs="") {
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");*/"+xs+"/*");}
void helperszshared() {
code("const float PI = 3.141592;");
code("rule context_change_always");
code("active");
code("highFrequency");
code("{");
code("xsSetContextPlayer(0);");
code("}");
code("const int mInt = 0;");
code("const int mFloat = 1;");
code("const int mString = 2;");
code("const int mVector = 3;");
code("const int mBool = 4;");
code("const int xMetadata = 0;");
code("const int xDirtyBit = 1;");
code("const int xNextBlock = 2;");
code("const int xPrevBlock = 3;");
code("const int xData = 3;");
code("const int xVarNames = 4;");
code("const int xVariables = 5;");
code("const int mPointer = 0;");
code("const int mCount = 1;");
code("const int mNextFree = 2;");
code("const int mNewestBlock = 3;");
code("const int mCacheHead = 4;");
code("const int mCacheCount = 5;");
code("const int mVariableTypes = 5;");
code("const int NEXTFREE = 0;");
code("int MALLOC = 0;");
code("int ARRAYS = 0;");
code("int mNumArrays = 0;");
code("bool debugIsOn = true;");
code("void debugLog(string msg = \"\") {");
code("if (debugIsOn) {");
code("trChatSend(0, \"<color=1,0,0>\" + msg);");
code("}");
code("}");
code("string datatypeName(int data = 0) {");
code("string name = \"void\";");
code("if (data >= 0 && data <= 4) {");
code("name = aiPlanGetUserVariableString(MALLOC,15,data);");
code("}");
code("return(name);");
code("}");
code("int zNewArray(int type = 0, int size = 1, string name = \"\") {");
code("int index = mNumArrays;");
code("mNumArrays = mNumArrays + 1;");
code("switch(type)");
code("{");
code("case mInt:");
code("{");
code("aiPlanAddUserVariableInt(ARRAYS,index,name,size);");
code("}");
code("case mFloat:");
code("{");
code("aiPlanAddUserVariableFloat(ARRAYS,index,name,size);");
code("}");
code("case mString:");
code("{");
code("aiPlanAddUserVariableString(ARRAYS,index,name,size);");
code("}");
code("case mVector:");
code("{");
code("aiPlanAddUserVariableVector(ARRAYS,index,name,size);");
code("}");
code("case mBool:");
code("{");
code("aiPlanAddUserVariableBool(ARRAYS,index,name,size);");
code("}");
code("}");
code("return(index);");
code("}");
code("void zSetInt(int arr = 0, int index = 0, int val = 0) {");
code("aiPlanSetUserVariableInt(ARRAYS, arr, index, val);");
code("}");
code("void zSetFloat(int arr = 0, int index = 0, float val = 0) {");
code("aiPlanSetUserVariableFloat(ARRAYS, arr, index, val);");
code("}");
code("void zSetBool(int arr = 0, int index = 0, bool val = false) {");
code("aiPlanSetUserVariableBool(ARRAYS, arr, index, val);");
code("}");
code("void zSetString(int arr = 0, int index = 0, string val = \"\") {");
code("aiPlanSetUserVariableString(ARRAYS, arr, index, val);");
code("}");
code("void zSetVector(int arr = 0, int index = 0, vector val = vector(0,0,0)) {");
code("aiPlanSetUserVariableVector(ARRAYS, arr, index, val);");
code("}");
code("int zGetInt(int arr = 0, int index = 0) {");
code("return(aiPlanGetUserVariableInt(ARRAYS, arr, index));");
code("}");
code("float zGetFloat(int arr = 0, int index = 0) {");
code("return(aiPlanGetUserVariableFloat(ARRAYS, arr, index));");
code("}");
code("bool zGetBool(int arr = 0, int index = 0) {");
code("return(aiPlanGetUserVariableBool(ARRAYS, arr, index));");
code("}");
code("string zGetString(int arr = 0, int index = 0) {");
code("return(aiPlanGetUserVariableString(ARRAYS, arr, index));");
code("}");
code("vector zGetVector(int arr = 0, int index = 0) {");
code("return(aiPlanGetUserVariableVector(ARRAYS, arr, index));");
code("}");
code("bool free(int type = -1, int index = -1) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, type * 3 + xDirtyBit - 1, index)) {");
code("aiPlanSetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, index,");
code("aiPlanGetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, NEXTFREE));");
code("aiPlanSetUserVariableBool(MALLOC, type * 3 + xDirtyBit - 1, index, false);");
code("aiPlanSetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, NEXTFREE, index);");
code("success = true;");
code("}");
code("return(success);");
code("}");
code("int malloc(int type = -1) {");
code("int next = aiPlanGetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, NEXTFREE);");
code("if (next == 0) {");
code("next = aiPlanGetNumberUserVariableValues(MALLOC,type * 3 + xNextBlock - 1);");
code("for(i=type * 3; < type * 3 + 3) {");
code("aiPlanSetNumberUserVariableValues(MALLOC,i,next + 1, false);");
code("}");
code("aiPlanSetUserVariableInt(MALLOC,type * 3 + xNextBlock - 1, next, 0);");
code("} else {");
code("aiPlanSetUserVariableInt(MALLOC,type * 3 + xNextBlock - 1,NEXTFREE,");
code("aiPlanGetUserVariableInt(MALLOC,type * 3 + xNextBlock - 1,next));");
code("}");
code("aiPlanSetUserVariableBool(MALLOC,type * 3 + xDirtyBit - 1, next, true);");
code("return(next);");
code("}");
code("bool mGetBool(int index = 0) {");
code("bool val = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mBool * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableBool(MALLOC, mBool * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");
code("bool mSetBool(int index = 0, bool val = false) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mBool * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableBool(MALLOC, mBool * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");
code("int mNewBool(bool val = false) {");
code("int index = malloc(mBool);");
code("mSetBool(index, val);");
code("return(index);");
code("}");
code("bool mFreeBool(int index = 0) {");
code("return(free(mBool, index));");
code("}");
code("string mGetString(int index = 0) {");
code("string val = \"\";");
code("if (aiPlanGetUserVariableBool(MALLOC, mString * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableString(MALLOC, mString * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");
code("bool mSetString(int index = 0, string val = \"\") {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mString * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableString(MALLOC, mString * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");
code("int mNewString(string val = \"\") {");
code("int index = malloc(mString);");
code("mSetString(index, val);");
code("return(index);");
code("}");
code("bool mFreeString(int index = 0) {");
code("return(free(mString, index));");
code("}");
code("int mGetInt(int index = 0) {");
code("int val = -1;");
code("if (aiPlanGetUserVariableBool(MALLOC, mInt * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableInt(MALLOC, mInt * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");
code("bool mSetInt(int index = 0, int val = 0) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mInt * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableInt(MALLOC, mInt * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");
code("int mNewInt(int val = 0) {");
code("int index = malloc(mInt);");
code("mSetInt(index, val);");
code("return(index);");
code("}");
code("bool mFreeInt(int index = 0) {");
code("return(free(mInt, index));");
code("}");
code("float mGetFloat(int index = 0) {");
code("float val = -1;");
code("if (aiPlanGetUserVariableBool(MALLOC, mFloat * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableFloat(MALLOC, mFloat * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");
code("bool mSetFloat(int index = 0, float val = 0) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mFloat * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableFloat(MALLOC, mFloat * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");
code("int mNewFloat(float val = 0) {");
code("int index = malloc(mFloat);");
code("mSetFloat(index, val);");
code("return(index);");
code("}");
code("bool mFreeFloat(int index = 0) {");
code("return(free(mFloat, index));");
code("}");
code("vector mGetVector(int index = 0) {");
code("vector val = vector(-1,-1,-1);");
code("if (aiPlanGetUserVariableBool(MALLOC, mVector * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableVector(MALLOC, mVector * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");
code("bool mSetVector(int index = 0, vector val = vector(0,0,0)) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mVector * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableVector(MALLOC, mVector * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");
code("int mNewVector(vector val = vector(0,0,0)) {");
code("int index = malloc(mVector);");
code("mSetVector(index, val);");
code("return(index);");
code("}");
code("bool mFreeVector(int index = 0) {");
code("return(free(mVector, index));");
code("}");
code("int xInitDatabase(string name = \"\", int size = 0) {");
code("int id = aiPlanCreate(name, 8);");
code("aiPlanAddUserVariableBool(id,xDirtyBit,\"DirtyBit\",size+1);");
code("aiPlanAddUserVariableInt(id,xNextBlock,\"NextBlock\",size+1);");
code("aiPlanAddUserVariableInt(id,xPrevBlock,\"PrevBlock\",size+1);");
code("aiPlanAddUserVariableInt(id,xMetadata,\"Metadata\",6);");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheCount,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,size);");
code("aiPlanSetUserVariableInt(id,xNextBlock,0,0);");
code("for(i=1; <= size) {");
code("aiPlanSetUserVariableBool(id,xDirtyBit,i,false);");
code("aiPlanSetUserVariableInt(id,xNextBlock,i,i-1);");
code("}");
code("aiPlanAddUserVariableString(id,xVarNames,\"VarNames\",1);");
code("aiPlanSetUserVariableString(id,xVarNames,0,\"none\");");
code("return(id);");
code("}");
code("int xInitAddVar(int id = 0, string name = \"\", int type = 0) {");
code("int count = aiPlanGetNumberUserVariableValues(id,xDirtyBit);");
code("int index = aiPlanGetNumberUserVariableValues(id,xMetadata);");
code("aiPlanSetNumberUserVariableValues(id,xMetadata,index + 1,false);");
code("aiPlanSetUserVariableInt(id,xMetadata,index,type);");
code("index = aiPlanGetNumberUserVariableValues(id,xVarNames);");
code("aiPlanSetNumberUserVariableValues(id,xVarNames,index+1,false);");
code("aiPlanSetUserVariableString(id,xVarNames,index,name);");
code("index = xVarNames + index;");
code("switch(type)");
code("{");
code("case mInt:");
code("{");
code("aiPlanAddUserVariableInt(id,index,name,count);");
code("}");
code("case mFloat:");
code("{");
code("aiPlanAddUserVariableFloat(id,index,name,count);");
code("}");
code("case mString:");
code("{");
code("aiPlanAddUserVariableString(id,index,name,count);");
code("}");
code("case mVector:");
code("{");
code("aiPlanAddUserVariableVector(id,index,name,count);");
code("}");
code("case mBool:");
code("{");
code("aiPlanAddUserVariableBool(id,index,name,count);");
code("}");
code("}");
code("return(index);");
code("}");
code("int xInitAddInt(int id = 0, string name = \"\", int defVal = 0) {");
code("int index = xInitAddVar(id,name,mInt);");
code("aiPlanSetUserVariableInt(id, index, 0, defVal);");
code("return(index);");
code("}");
code("int xInitAddFloat(int id = 0, string name = \"\", float defVal = 0) {");
code("int index = xInitAddVar(id, name, mFloat);");
code("aiPlanSetUserVariableFloat(id, index, 0, defVal);");
code("return(index);");
code("}");
code("int xInitAddString(int id = 0, string name = \"\", string defVal = \"\") {");
code("int index = xInitAddVar(id, name, mString);");
code("aiPlanSetUserVariableString(id, index, 0, defVal);");
code("return(index);");
code("}");
code("int xInitAddVector(int id = 0, string name = \"\", vector defVal = vector(0,0,0)) {");
code("int index = xInitAddVar(id, name, mVector);");
code("aiPlanSetUserVariableVector(id, index, 0, defVal);");
code("return(index);");
code("}");
code("int xInitAddBool(int id = 0, string name = \"\", bool defVal = false) {");
code("int index = xInitAddVar(id,name,mBool);");
code("aiPlanSetUserVariableBool(id, index, 0, defVal);");
code("return(index);");
code("}");
code("void xResetValues(int id = 0, int index = -1, int stopAt = -1) {");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("if (stopAt == -1) {");
code("stopAt = aiPlanGetNumberUserVariableValues(id, xVarNames);");
code("} else {");
code("stopAt = stopAt - mVariableTypes;");
code("}");
code("for(i = 1; < stopAt) {");
code("switch(aiPlanGetUserVariableInt(id,xMetadata,mVariableTypes + i))");
code("{");
code("case mInt:");
code("{");
code("aiPlanSetUserVariableInt(id,xVarNames + i,index,aiPlanGetUserVariableInt(id,xVarNames + i,0));");
code("}");
code("case mFloat:");
code("{");
code("aiPlanSetUserVariableFloat(id,xVarNames + i,index,aiPlanGetUserVariableFloat(id,xVarNames + i,0));");
code("}");
code("case mString:");
code("{");
code("aiPlanSetUserVariableString(id,xVarNames + i,index,aiPlanGetUserVariableString(id,xVarNames + i,0));");
code("}");
code("case mVector:");
code("{");
code("aiPlanSetUserVariableVector(id,xVarNames + i,index,aiPlanGetUserVariableVector(id,xVarNames + i,0));");
code("}");
code("case mBool:");
code("{");
code("aiPlanSetUserVariableBool(id,xVarNames + i,index,aiPlanGetUserVariableBool(id,xVarNames + i,0));");
code("}");
code("}");
code("}");
code("}");
code("bool xSetPointer(int id = 0, int index = 0) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(id,xDirtyBit,index)) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,index);");
code("success = true;");
code("}");
code("return(success);");
code("}");
code("int xAddDatabaseBlock(int id = 0, bool setPointer = false) {");
code("int next = aiPlanGetUserVariableInt(id,xMetadata,mNextFree);");
code("if (next == 0) {");
code("next = aiPlanGetNumberUserVariableValues(id,xDirtyBit);");
code("for(i=aiPlanGetNumberUserVariableValues(id,xVarNames) - 1; > 0) {");
code("aiPlanSetNumberUserVariableValues(id,i + xVarNames,next+1,false);");
code("}");
code("for(i=xPrevBlock; > xMetadata) {");
code("aiPlanSetNumberUserVariableValues(id,i,next+1,false);");
code("}");
code("} else {");
code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,aiPlanGetUserVariableInt(id,xNextBlock,next));");
code("}");
code("aiPlanSetUserVariableBool(id,xDirtyBit,next,true);");
code("if (aiPlanGetUserVariableInt(id,xMetadata,mCount) == 0) {");
code("aiPlanSetUserVariableInt(id,xNextBlock,next,next);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,next,next);");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,next);");
code("} else {");
code("int before = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("int after = aiPlanGetUserVariableInt(id,xNextBlock,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,next,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,next,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,next);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,next);");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mNewestBlock,next);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount, 1 + aiPlanGetUserVariableInt(id,xMetadata,mCount));");
code("xResetValues(id,next);");
code("if (setPointer) {");
code("xSetPointer(id, next);");
code("}");
code("return(next);");
code("}");
code("bool xFreeDatabaseBlock(int id = 0, int index = -1) {");
code("bool success = false;");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("if (aiPlanGetUserVariableBool(id,xDirtyBit,index)) {");
code("int after = aiPlanGetUserVariableInt(id,xNextBlock,index);");
code("int before = aiPlanGetUserVariableInt(id,xPrevBlock,index);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,index,aiPlanGetUserVariableInt(id,xMetadata,mNextFree));");
code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,index);");
code("aiPlanSetUserVariableBool(id,xDirtyBit,index,false);");
code("if (index == aiPlanGetUserVariableInt(id,xMetadata,mPointer)) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,aiPlanGetUserVariableInt(id,xPrevBlock,index));");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount, aiPlanGetUserVariableInt(id,xMetadata,mCount) - 1);");
code("success = true;");
code("}");
code("return(success);");
code("}");
code("bool xDetachDatabaseBlock(int id = 0, int index = -1) {");
code("bool success = false;");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("if (aiPlanGetUserVariableBool(id,xDirtyBit,index)) {");
code("int after = aiPlanGetUserVariableInt(id,xNextBlock,index);");
code("int before = aiPlanGetUserVariableInt(id,xPrevBlock,index);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,before);");
code("aiPlanSetUserVariableBool(id,xDirtyBit,index,false);");
code("if (index == aiPlanGetUserVariableInt(id,xMetadata,mPointer)) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,before);");
code("}");
code("if (aiPlanGetUserVariableInt(id,xMetadata,mCacheCount) == 0) {");
code("aiPlanSetUserVariableInt(id,xNextBlock,index,index);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,index,index);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,index);");
code("} else {");
code("before = aiPlanGetUserVariableInt(id,xMetadata,mCacheHead);");
code("after = aiPlanGetUserVariableInt(id,xNextBlock,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,index,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,index,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,index);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,index);");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount, aiPlanGetUserVariableInt(id,xMetadata,mCount) - 1);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheCount, aiPlanGetUserVariableInt(id,xMetadata,mCacheCount) + 1);");
code("success = true;");
code("}");
code("return(success);");
code("}");
code("bool xRestoreDatabaseBlock(int id = 0, int index = -1) {");
code("bool success = false;");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mCacheHead);");
code("}");
code("if (aiPlanGetUserVariableBool(id,xDirtyBit,index) == false) {");
code("int after = aiPlanGetUserVariableInt(id,xNextBlock,index);");
code("int before = aiPlanGetUserVariableInt(id,xPrevBlock,index);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,before);");
code("aiPlanSetUserVariableBool(id,xDirtyBit,index,true);");
code("if (index == aiPlanGetUserVariableInt(id,xMetadata,mCacheHead)) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,aiPlanGetUserVariableInt(id,xPrevBlock,index));");
code("}");
code("if (aiPlanGetUserVariableInt(id,xMetadata,mCount) == 0) {");
code("aiPlanSetUserVariableInt(id,xNextBlock,index,index);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,index,index);");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,index);");
code("} else {");
code("before = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("after = aiPlanGetUserVariableInt(id,xNextBlock,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,index,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,index,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,index);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,index);");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount, aiPlanGetUserVariableInt(id,xMetadata,mCount) + 1);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheCount, aiPlanGetUserVariableInt(id,xMetadata,mCacheCount) - 1);");
code("success = true;");
code("}");
code("return(success);");
code("}");
code("bool xRestoreCache(int id = 0) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableInt(id,xMetadata,mCacheCount) > 0) {");
code("int pointer = aiPlanGetUserVariableInt(id,xMetadata,mCacheHead);");
code("for(i=aiPlanGetUserVariableInt(id,xMetadata,mCacheCount); >0) {");
code("aiPlanSetUserVariableBool(id,xDirtyBit,pointer,true);");
code("pointer = aiPlanGetUserVariableInt(id,xNextBlock,pointer);");
code("}");
code("if (aiPlanGetUserVariableInt(id,xMetadata,mCount) == 0) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,aiPlanGetUserVariableInt(id,xMetadata,mCacheHead));");
code("} else {");
code("int before = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("int after = aiPlanGetUserVariableInt(id,xNextBlock,before);");
code("int index = aiPlanGetUserVariableInt(id,xMetadata,mCacheHead);");
code("int next = aiPlanGetUserVariableInt(id,xPrevBlock,index);");
code("aiPlanSetUserVariableInt(id,xNextBlock,next,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,next);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,index);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,index,before);");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount,");
code("aiPlanGetUserVariableInt(id,xMetadata,mCount) + aiPlanGetUserVariableInt(id,xMetadata,mCacheCount));");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheCount,0);");
code("success = true;");
code("}");
code("return(success);");
code("}");
code("int xGetNewestPointer(int id = 0) {");
code("return(aiPlanGetUserVariableInt(id,xMetadata,mNewestBlock));");
code("}");
code("int xDatabaseNext(int id = 0, bool reverse = false) {");
code("int pointer = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("if (reverse) {");
code("pointer = aiPlanGetUserVariableInt(id,xPrevBlock,pointer);");
code("} else {");
code("pointer = aiPlanGetUserVariableInt(id,xNextBlock,pointer);");
code("}");
code("if (aiPlanGetUserVariableBool(id,xDirtyBit,pointer) && (aiPlanGetUserVariableInt(id,xMetadata,mCount) > 0)) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,pointer);");
code("} else {");
code("pointer = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("debugLog(\"xDatabaseNext: \" + aiPlanGetName(id) + \" pointer is incorrect!\");");
code("debugLog(\"xNextBlock: \" + aiPlanGetUserVariableInt(id,xNextBlock,pointer));");
code("debugLog(\"Me: \" + pointer);");
code("debugLog(\"xPrevblock: \" + aiPlanGetUserVariableInt(id,xPrevBlock,pointer));");
code("}");
code("return(pointer);");
code("}");
code("void xClearDatabase(int id = 0) {");
code("int next = aiPlanGetUserVariableInt(id,xMetadata,mNextFree);");
code("int pointer = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,aiPlanGetUserVariableInt(id,xNextBlock,pointer));");
code("aiPlanSetUserVariableInt(id,xNextBlock,pointer,next);");
code("for(i=0; < aiPlanGetNumberUserVariableValues(id,xDirtyBit)) {");
code("aiPlanSetUserVariableBool(id,xDirtyBit,i,false);");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,0);");
code("}");
code("void xResetDatabase(int id = 0) {");
code("int size = aiPlanGetNumberUserVariableValues(id,xDirtyBit);");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheCount,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,size - 1);");
code("aiPlanSetUserVariableInt(id,xNextBlock,0,0);");
code("for(i=1; < size) {");
code("aiPlanSetUserVariableBool(id,xDirtyBit,i,false);");
code("aiPlanSetUserVariableInt(id,xNextBlock,i,i-1);");
code("}");
code("}");
code("int xGetInt(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mInt) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetInt: \" + aiPlanGetName(id) + \" variable \" + name + \" is not an int! Type: \" + type);");
code("return(-1);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableInt(id,data,index));");
code("}");
code("bool xSetInt(int id = 0, int data = 0, int val = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mInt) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xSetInt: \" + aiPlanGetName(id) + \" variable \" + name + \" is not an int! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("bool success = aiPlanSetUserVariableInt(id,data,index,val);");
code("if (success == false) {");
code("string err = \": Could not assign value: \" + val;");
code("debugLog(\"xSetInt: \" + aiPlanGetName(id) + aiPlanGetUserVariableString(id,xVarNames,data - xVarNames) + err);");
code("}");
code("return(success);");
code("}");
code("float xGetFloat(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mFloat) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetFloat: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a float! Type: \" + type);");
code("return(-1.0);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableFloat(id,data,index));");
code("}");
code("bool xSetFloat(int id = 0, int data = 0, float val = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mFloat) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xSetFloat: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a float! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("bool success = aiPlanSetUserVariableFloat(id,data,index,val);");
code("if (success == false) {");
code("string err = \": Could not assign value: \" + val;");
code("debugLog(\"xSetFloat: \" + aiPlanGetName(id) + aiPlanGetUserVariableString(id,xVarNames,data - xVarNames) + err);");
code("}");
code("return(success);");
code("}");
code("string xGetString(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mString) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetString: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a string! Type: \" + type);");
code("return(\"\");");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableString(id,data,index));");
code("}");
code("bool xSetString(int id = 0, int data = 0, string val = \"\", int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mString) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xSetString: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a string! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanSetUserVariableString(id,data,index,val));");
code("}");
code("vector xGetVector(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mVector) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetVector: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a vector! Type: \" + type);");
code("return(vector(0,0,0));");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableVector(id,data,index));");
code("}");
code("bool xSetVector(int id = 0, int data = 0, vector val = vector(0,0,0), int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mVector) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xSetVector: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a vector! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanSetUserVariableVector(id,data,index,val));");
code("}");
code("bool xGetBool(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mBool) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetBool: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a bool! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableBool(id,data,index));");
code("}");
code("bool xSetBool(int id = 0, int data = 0, bool val = false, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mBool) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetBool: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a bool! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanSetUserVariableBool(id,data,index,val));");
code("}");
code("int xGetDatabaseCount(int id = 0) {");
code("return(aiPlanGetUserVariableInt(id,xMetadata,mCount));");
code("}");
code("int xGetPointer(int id = 0) {");
code("return(aiPlanGetUserVariableInt(id,xMetadata,mPointer));");
code("}");
code("void xPrintAll(int id = 0, int index = 0) {");
code("trChatSend(0, \"<u>\" + aiPlanGetName(id) + \"</u>\");");
code("trChatSend(0, \"size: \" + xGetDatabaseCount(id));");
code("trChatSend(0, \"pointer: \" + index);");
code("for(i=1; < aiPlanGetNumberUserVariableValues(id,xVarNames)) {");
code("string name = aiPlanGetUserVariableString(id,xVarNames,i);");
code("int type = aiPlanGetUserVariableInt(id,xMetadata,mVariableTypes + i);");
code("switch(type)");
code("{");
code("case mInt:");
code("{");
code("trChatSend(0, name + \": \" + aiPlanGetUserVariableInt(id,xVarNames + i,index));");
code("}");
code("case mFloat:");
code("{");
code("trChatSend(0, name + \": \" + aiPlanGetUserVariableFloat(id,xVarNames + i,index));");
code("}");
code("case mString:");
code("{");
code("trChatSend(0, name + \": \" + aiPlanGetUserVariableString(id,xVarNames + i,index));");
code("}");
code("case mVector:");
code("{");
code("trChatSend(0, name + \": \" + aiPlanGetUserVariableVector(id,xVarNames + i,index));");
code("}");
code("case mBool:");
code("{");
code("if (aiPlanGetUserVariableBool(id,xVarNames + i,index)) {");
code("trChatSend(0, name + \": true\");");
code("} else {");
code("trChatSend(0, name + \": false\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("void xUnitSelect(int id = 0, int varn = 0, bool reverse = true) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(id,varn), reverse);");
code("}");
code("void xUnitSelectByID(int db = 0, int varn = 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(xGetInt(db,varn));");
code("}");
code("rule mInitializeMemory");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("aiSet(\"NoAI\", 0);");
code("MALLOC = aiPlanCreate(\"memory\",8);");
code("ARRAYS = aiPlanCreate(\"arrays\",8);");
code("for(i=0; < 5) {");
code("aiPlanAddUserVariableBool(MALLOC,i * 3 + xDirtyBit - 1,\"DirtyBit\"+i,1);");
code("aiPlanAddUserVariableInt(MALLOC,i * 3 + xNextBlock - 1,\"NextBlock\"+i,1);");
code("aiPlanSetUserVariableBool(MALLOC,i * 3 + xDirtyBit - 1, NEXTFREE, true);");
code("aiPlanSetUserVariableInt(MALLOC,i * 3 + xNextBlock - 1, NEXTFREE, 0);");
code("}");
code("aiPlanAddUserVariableInt(MALLOC,mInt * 3 + xData - 1, \"intData\",1);");
code("aiPlanAddUserVariableFloat(MALLOC,mFloat * 3 + xData - 1, \"floatData\",1);");
code("aiPlanAddUserVariableString(MALLOC,mString * 3 + xData - 1, \"stringData\",1);");
code("aiPlanAddUserVariableVector(MALLOC,mVector * 3 + xData - 1, \"vectorData\",1);");
code("aiPlanAddUserVariableBool(MALLOC,mBool * 3 + xData - 1, \"boolData\",1);");
code("aiPlanAddUserVariableString(MALLOC,15,\"datatypes\",5);");
code("aiPlanSetUserVariableString(MALLOC,15,mInt,\"Integer\");");
code("aiPlanSetUserVariableString(MALLOC,15,mFloat,\"Float\");");
code("aiPlanSetUserVariableString(MALLOC,15,mString,\"String\");");
code("aiPlanSetUserVariableString(MALLOC,15,mVector,\"Vector\");");
code("aiPlanSetUserVariableString(MALLOC,15,mBool,\"Bool\");");
code("}");
code("void trVectorQuestVarSet(string name = \"\", vector QVv = vector(-1,-1,-1)) {");
code("if (name == \"\") return;");
code("if (trQuestVarGet(\"vector\"+name) == 0) {");
code("trQuestVarSet(\"vector\"+name, mNewVector(QVv));");
code("} else {");
code("mSetVector(1*trQuestVarGet(\"vector\"+name),QVv);");
code("}");
code("}");
code("vector trVectorQuestVarGet(string name = \"\") {");
code("return(mGetVector(1*trQuestVarGet(\"vector\"+name)));");
code("}");
code("float trVectorQuestVarGetX(string name = \"\") {");
code("return(xsVectorGetX(trVectorQuestVarGet(name)));");
code("}");
code("float trVectorQuestVarGetY(string name = \"\") {");
code("return(xsVectorGetY(trVectorQuestVarGet(name)));");
code("}");
code("float trVectorQuestVarGetZ(string name = \"\") {");
code("return(xsVectorGetZ(trVectorQuestVarGet(name)));");
code("}");
code("void trVectorQuestVarEcho(string name = \"\") {");
code("if (name == \"\") return;");
code("trChatSend(0, \"\"+name+\": \"+trVectorQuestVarGet(name));");
code("}");
code("void trStringQuestVarSet(string name = \"\", string value = \"\") {");
code("if (trQuestVarGet(\"string\"+name) > 0) {");
code("mSetString(1*trQuestVarGet(\"string\"+name), value);");
code("} else {");
code("trQuestVarSet(\"string\"+name, mNewString(value));");
code("}");
code("}");
code("string trStringQuestVarGet(string name=\"\") {");
code("string val = mGetString(1*trQuestVarGet(\"string\"+name));");
code("return(val);");
code("}");
code("bool playerIsPlaying(int p = 0) {");
code("return(kbIsPlayerHuman(p) == true && kbIsPlayerResigned(p) == false && trPlayerDefeated(p) == false);");
code("}");
code("void trUnitTeleportToVector(string v = \"\") {");
code("vector pos = trVectorQuestVarGet(v);");
code("trUnitTeleport(xsVectorGetX(pos),xsVectorGetY(pos),xsVectorGetZ(pos));");
code("}");
code("void trUnitSelectByQV(string s = \"\", bool reverse = true) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"\"+s), reverse);");
code("}");
code("void trVectorSetUnitPos(string v = \"\", string db = \"\", bool reverse = true) {");
code("trVectorQuestVarSet(v, kbGetBlockPosition(\"\"+1*trQuestVarGet(db), reverse));");
code("}");
code("void trVectorSetUnitPosInt(string v = \"\", int val = 0, bool reverse = true) {");
code("trVectorQuestVarSet(v, kbGetBlockPosition(\"\"+val, reverse));");
code("}");
code("void trUnitMoveToVector(string v = \"\", bool attack = false) {");
code("trUnitMoveToPoint(trVectorQuestVarGetX(v),0,trVectorQuestVarGetZ(v),-1,attack);");
code("}");
code("void trVectorScale(string db = \"\", float s = 1.0) {");
code("trVectorQuestVarSet(db, trVectorQuestVarGet(db) * s);");
code("}");
code("vector vectorSnapToGrid(vector v = vector(0,0,0)) {");
code("int x = xsVectorGetX(v) / 2;");
code("int z = xsVectorGetZ(v) / 2;");
code("return(xsVectorSet(x * 2 + 1,xsVectorGetY(v),z * 2 + 1));");
code("}");
code("void trVectorSnapToGrid(string qv = \"\") {");
code("trVectorQuestVarSet(qv, vectorSnapToGrid(trVectorQuestVarGet(qv)));");
code("}");
code("int iModulo(int mod = 10, int val = 0) {");
code("return(val - val / mod * mod);");
code("}");
code("float fModulo(float mod = 0, float val = 0) {");
code("int c = 0;");
code("if (val > 0) {");
code("c = val / mod;");
code("} else {");
code("c = val / mod - 1;");
code("}");
code("return(0.0 + val - mod * c);");
code("}");
code("bool getBit(int bit = 0, int val = 0) {");
code("val = val / xsPow(2, bit);");
code("return((iModulo(2, val) == 1));");
code("}");
code("void zUnitHeading(float a = 0) {");
code("trSetUnitOrientation(xsVectorSet(xsSin(a),0,xsCos(a)), xsVectorSet(0,1,0), true);");
code("}");
code("void zInitProtoUnitStat(string r = \"\", int p = 0, int f = 0, float v = 0.0) {");
code("trQuestVarSet(\"p\"+p+\"pf\"+kbGetProtoUnitID(r)+\"f\"+f, v);");
code("}");
code("void mSetProtoUnitStat(string r = \"\", int p = 0, int f = 0, float v = 0.0) {");
code("for(zsps=0; >1){}");
code("zsps = kbGetProtoUnitID(r);");
code("trModifyProtounit(r, p, f, 0.0 + v - trQuestVarGet(\"p\"+p+\"pf\"+zsps+\"f\"+f));");
code("trQuestVarSet(\"p\"+p+\"pf\"+zsps+\"f\"+f, 0.0 + v);");
code("}");
code("vector vectorToGrid(vector v = vector(0,0,0)) {");
code("return(xsVectorSet(0 + xsVectorGetX(v) / 2,xsVectorGetY(v),0 + xsVectorGetZ(v) / 2));");
code("}");
code("void trVectorToGrid(string from = \"\", string to = \"\"){");
code("trVectorQuestVarSet(to, vectorToGrid(trVectorQuestVarGet(from)));");
code("}");
code("vector gridToVector(vector g = vector(0,0,0)) {");
code("return(xsVectorSet(xsVectorGetX(g) * 2 + 1,xsVectorGetY(g),xsVectorGetZ(g) * 2 + 1));");
code("}");
code("void trGridToVector(string from = \"\", string to = \"\") {");
code("trVectorQuestVarSet(to, gridToVector(trVectorQuestVarGet(from)));");
code("}");
code("void trSquareVar(string qv = \"\") {");
code("trQuestVarSet(qv, xsPow(trQuestVarGet(qv), 2));");
code("}");
code("float distanceBetweenVectors(vector start = vector(0,0,0), vector end = vector(0,0,0), bool squared = true) {");
code("float xDiff = xsVectorGetX(end) - xsVectorGetX(start);");
code("float zDiff = xsVectorGetZ(end) - xsVectorGetZ(start);");
code("float dist = xDiff * xDiff + zDiff * zDiff;");
code("if (squared == false) {");
code("dist = xsSqrt(dist);");
code("}");
code("return(dist);");
code("}");
code("float trDistanceBetweenVectorsSquared(string start = \"\", string end = \"\") {");
code("return(distanceBetweenVectors(trVectorQuestVarGet(start),trVectorQuestVarGet(end)));");
code("}");
code("bool vectorInRectangle(vector pos = vector(0,0,0), vector bot = vector(0,0,0), vector top = vector(0,0,0)) {");
code("if (xsVectorGetX(pos) < xsVectorGetX(bot)) {");
code("return(false);");
code("}");
code("if (xsVectorGetX(pos) > xsVectorGetX(top)) {");
code("return(false);");
code("}");
code("if (xsVectorGetZ(pos) < xsVectorGetZ(bot)) {");
code("return(false);");
code("}");
code("if (xsVectorGetZ(pos) > xsVectorGetZ(top)) {");
code("return(false);");
code("}");
code("return(true);");
code("}");
code("bool trVectorInRectangle(string pos = \"\", string bot = \"\", string top = \"\") {");
code("vector tempPos = mGetVector(1*trQuestVarGet(pos));");
code("vector tempBot = mGetVector(1*trQuestVarGet(bot));");
code("vector tempTop = mGetVector(1*trQuestVarGet(top));");
code("return(vectorInRectangle(tempPos,tempBot,tempTop));");
code("}");
code("vector rotationMatrix(vector v = vector(0,0,0), float cosT = 0, float sinT = 0) {");
code("float x = xsVectorGetX(v);");
code("float z = xsVectorGetZ(v);");
code("vector ret = xsVectorSet(x * cosT - z * sinT, 0, x * sinT + z * cosT);");
code("return(ret);");
code("}");
code("float trDistanceBetweenVectors(string start = \"\", string end = \"\") {");
code("return(distanceBetweenVectors(trVectorQuestVarGet(start),trVectorQuestVarGet(end),false));");
code("}");
code("float distanceBetweenVectors3d(vector start = vector(0,0,0), vector end = vector(0,0,0), bool squared = true) {");
code("float xdiff = xsVectorGetX(start) - xsVectorGetX(end);");
code("float ydiff = xsVectorGetY(start) - xsVectorGetY(end);");
code("float zdiff = xsVectorGetZ(start) - xsVectorGetZ(end);");
code("float dist = xdiff * xdiff + ydiff * ydiff + zdiff * zdiff;");
code("if (squared == false) {");
code("dist = xsSqrt(dist);");
code("}");
code("return(dist);");
code("}");
code("float trDistanceBetweenVectors3d(string start = \"\", string end = \"\") {");
code("return(distanceBetweenVectors3d(trVectorQuestVarGet(start),trVectorQuestVarGet(end),false));");
code("}");
code("float unitDistanceToVector(int name = 0, vector v = vector(0,0,0), bool squared = true) {");
code("vector temp = kbGetBlockPosition(\"\"+name,true);");
code("return(distanceBetweenVectors(temp,v,squared));");
code("}");
code("float trDistanceToVectorSquared(string qv = \"\", string v = \"\") {");
code("return(unitDistanceToVector(1*trQuestVarGet(qv),trVectorQuestVarGet(v)));");
code("}");
code("float trDistanceToVector(string qv = \"\", string v = \"\") {");
code("return(unitDistanceToVector(1*trQuestVarGet(qv),trVectorQuestVarGet(v),false));");
code("}");
code("vector vectorSetFromAngle(float angle = 0) {");
code("return(xsVectorSet(xsSin(angle), 0, xsCos(angle)));");
code("}");
code("void trVectorSetFromAngle(string qv = \"\", float angle = 0) {");
code("trVectorQuestVarSet(qv,xsVectorSet(xsSin(angle), 0, xsCos(angle)));");
code("}");
code("float angleBetweenVectors(vector from = vector(0,0,0), vector to = vector(0,0,0)) {");
code("float a = xsVectorGetX(to) - xsVectorGetX(from);");
code("a = a / (xsVectorGetZ(to) - xsVectorGetZ(from));");
code("a = xsAtan(a);");
code("if (xsVectorGetZ(from) > xsVectorGetZ(to)) {");
code("if (xsVectorGetX(from) > xsVectorGetX(to)) {");
code("a = a - PI;");
code("} else {");
code("a = a + PI;");
code("}");
code("}");
code("return(a);");
code("}");
code("float trAngleBetweenVectors(string from = \"\", string to = \"\") {");
code("return(angleBetweenVectors(trVectorQuestVarGet(from),trVectorQuestVarGet(to)));");
code("}");
code("float angleOfVector(vector dir = vector(0,0,0)) {");
code("float a = xsVectorGetX(dir) / xsVectorGetZ(dir);");
code("a = xsAtan(a);");
code("if (0.0 > xsVectorGetZ(dir)) {");
code("if (0.0 > xsVectorGetX(dir)) {");
code("a = a - PI;");
code("} else {");
code("a = a + PI;");
code("}");
code("}");
code("return(a);");
code("}");
code("float trAngleOfVector(string v = \"\") {");
code("return(angleOfVector(trVectorQuestVarGet(v)));");
code("}");
code("vector getUnitVector(vector start = vector(0,0,0), vector end = vector(0,0,0), float mod = 1.0) {");
code("float xdiff = xsVectorGetX(end) - xsVectorGetX(start);");
code("float zdiff = xsVectorGetZ(end) - xsVectorGetZ(start);");
code("float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);");
code("vector ret = vector(1,0,0);");
code("if (dist > 0) {");
code("ret = xsVectorSet(xdiff / dist * mod, 0, zdiff / dist * mod);");
code("}");
code("return(ret);");
code("}");
code("vector trGetUnitVector(string start = \"\", string end = \"\", float mod = 1.0) {");
code("return(getUnitVector(trVectorQuestVarGet(start),trVectorQuestVarGet(end),mod));");
code("}");
code("vector getUnitVector3d(vector start = vector(0,0,0), vector end = vector(0,0,0), float mod = 1.0) {");
code("float xdiff = xsVectorGetX(end) - xsVectorGetX(start);");
code("float ydiff = xsVectorGetY(end) - xsVectorGetY(start);");
code("float zdiff = xsVectorGetZ(end) - xsVectorGetZ(start);");
code("float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);");
code("vector ret = vector(0,1,0);");
code("if (dist > 0) {");
code("ret = xsVectorSet(xdiff / dist * mod, ydiff / dist * mod, zdiff / dist * mod);");
code("}");
code("return(ret);");
code("}");
code("vector trGetUnitVector3d(string start = \"\", string end = \"\", float mod = 1.0) {");
code("return(getUnitVector3d(trVectorQuestVarGet(start),trVectorQuestVarGet(end),mod));");
code("}");
code("vector crossProduct(vector a = vector(0,0,0), vector b = vector(0,0,0)) {");
code("float x = xsVectorGetY(a) * xsVectorGetZ(b) - xsVectorGetZ(a) * xsVectorGetY(b);");
code("float y = xsVectorGetZ(a) * xsVectorGetX(b) - xsVectorGetX(a) * xsVectorGetZ(b);");
code("float z = xsVectorGetX(a) * xsVectorGetY(b) - xsVectorGetY(a) * xsVectorGetX(b);");
code("vector ret = xsVectorSet(x, y, z);");
code("return(ret);");
code("}");
code("float dotProduct(vector a = vector(0,0,0), vector b = vector(0,0,0)) {");
code("return(xsVectorGetX(a) * xsVectorGetX(b) + xsVectorGetZ(a) * xsVectorGetZ(b));");
code("}");
code("bool terrainIsType(vector v = vector(0,0,0), int type = 0, int subtype = 0) {");
code("bool isType = trGetTerrainType(xsVectorGetX(v),xsVectorGetZ(v)) == type;");
code("isType = trGetTerrainSubType(xsVectorGetX(v),xsVectorGetZ(v)) == subtype;");
code("return(isType);");
code("}");
code("bool trTerrainIsType(string qv = \"\", int type = 0, int subtype = 0) {");
code("return(terrainIsType(trVectorQuestVarGet(qv),type,subtype));");
code("}");
code("void modularCounterInit(string name = \"\", int size = 0) {");
code("trQuestVarSet(\"counter\" + name + \"size\", size);");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1);");
code("trQuestVarSet(name, 1);");
code("}");
code("int modularCounterNext(string name = \"\") {");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("if (trQuestVarGet(\"counter\" + name + \"pointer\") > trQuestVarGet(\"counter\" + name + \"size\")) {");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1);");
code("}");
code("trQuestVarSet(name, trQuestVarGet(\"counter\"+name+\"pointer\"));");
code("return(0 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("}");
code("int peekModularCounterNext(string name = \"\") {");
code("trQuestVarSet(\"counter\" + name + \"fake\", 1 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("if (trQuestVarGet(\"counter\" + name + \"fake\") >= trQuestVarGet(\"counter\" + name + \"size\")) {");
code("trQuestVarSet(\"counter\" + name + \"fake\", 1);");
code("}");
code("return(0 + trQuestVarGet(\"counter\" + name + \"fake\"));");
code("}");
code("bool yDatabaseCreateIfNull(string dbname = \"\", int count = 0) {");
code("bool created = false;");
code("if (trQuestVarGet(\"database\"+dbname) == 0) {");
code("if (count < 0) {");
code("count = 0;");
code("}");
code("trQuestVarSet(\"database\"+dbname, xInitDatabase(dbname, count));");
code("created = true;");
code("}");
code("return(created);");
code("}");
code("bool yVariableExists(string dbname = \"\", string varname = \"\") {");
code("int db = trQuestVarGet(\"database\"+dbname);");
code("int var = trQuestVarGet(\"database\"+dbname+varname);");
code("return(db * var > 0);");
code("}");
code("float yGetVarAtIndex(string db = \"\", string var = \"\", int index = 0) {");
code("if (yVariableExists(db, var)) {");
code("return(xGetFloat(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),index));");
code("} else {");
code("return(0);");
code("}");
code("}");
code("float yGetVar(string db = \"\", string var = \"\") {");
code("return(yGetVarAtIndex(db, var, -1));");
code("}");
code("string yGetStringAtIndex(string db = \"\", string var = \"\", int index = 0) {");
code("if (yVariableExists(db, var)) {");
code("return(xGetString(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),index));");
code("} else {");
code("return(\"\");");
code("}");
code("}");
code("string yGetString(string db = \"\", string var = \"\") {");
code("return(yGetStringAtIndex(db, var, -1));");
code("}");
code("vector yGetVectorAtIndex(string db = \"\", string var = \"\", int index = 0) {");
code("if (yVariableExists(db, var)) {");
code("return(xGetVector(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),index));");
code("} else {");
code("return(vector(0,0,0));");
code("}");
code("}");
code("vector yGetVector(string db = \"\", string var = \"\") {");
code("return(yGetVectorAtIndex(db, var, -1));");
code("}");
code("void ySetVarAtIndex(string db = \"\", string var = \"\", float val = 0, int index = 0) {");
code("if (yVariableExists(db, var)) {");
code("xSetFloat(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),val,index);");
code("} else {");
code("yDatabaseCreateIfNull(db, index);");
code("trQuestVarSet(\"database\"+db+var, xInitAddFloat(1*trQuestVarGet(\"database\"+db),var));");
code("xSetFloat(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),val,index);");
code("}");
code("}");
code("void ySetVar(string db = \"\", string var = \"\", float val = 0) {");
code("ySetVarAtIndex(db, var, val, -1);");
code("}");
code("void ySetStringAtIndex(string db = \"\", string var = \"\", string val = \"\", int index = 0) {");
code("if (yVariableExists(db, var)) {");
code("xSetString(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),val,index);");
code("} else {");
code("yDatabaseCreateIfNull(db, index);");
code("trQuestVarSet(\"database\"+db+var, xInitAddFloat(1*trQuestVarGet(\"database\"+db),var));");
code("xSetString(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),val,index);");
code("}");
code("}");
code("void ySetString(string db = \"\", string var = \"\", string val = \"\") {");
code("ySetStringAtIndex(db, var, val, -1);");
code("}");
code("void ySetVectorAtIndex(string db = \"\", string var = \"\", vector val = vector(0,0,0), int index = 0) {");
code("if (yVariableExists(db, var)) {");
code("xSetVector(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),val,index);");
code("} else {");
code("yDatabaseCreateIfNull(db, index);");
code("trQuestVarSet(\"database\"+db+var, xInitAddFloat(1*trQuestVarGet(\"database\"+db),var));");
code("xSetVector(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),val,index);");
code("}");
code("}");
code("void ySetVector(string db = \"\", string var = \"\", vector val = vector(0,0,0)) {");
code("ySetVectorAtIndex(db, var, val, -1);");
code("}");
code("int yDatabaseNext(string db = \"\", bool select = false, bool reverse = false) {");
code("xDatabaseNext(1*trQuestVarGet(\"database\"+db), reverse);");
code("int u = yGetVar(db, \"unitName\");");
code("trQuestVarSet(db, u);");
code("if (select) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+u, true);");
code("return(kbGetBlockID(\"\"+u, true));");
code("} else {");
code("return(u);");
code("}");
code("}");
code("void yRemoveFromDatabase(string db = \"\") {");
code("xFreeDatabaseBlock(1*trQuestVarGet(\"database\"+db));");
code("}");
code("int yGetNewestPointer(string db = \"\") {");
code("return(xGetNewestPointer(1*trQuestVarGet(\"database\"+db)));");
code("}");
code("void yAddUpdateVar(string db = \"\", string var = \"\", float val = 0) {");
code("ySetVarAtIndex(db, var, val, yGetNewestPointer(db));");
code("}");
code("void yAddUpdateString(string db = \"\", string var = \"\", string val = \"\") {");
code("ySetStringAtIndex(db, var, val, yGetNewestPointer(db));");
code("}");
code("void yAddUpdateVector(string db = \"\", string var = \"\", vector val = vector(0,0,0)) {");
code("ySetVectorAtIndex(db, var, val, yGetNewestPointer(db));");
code("}");
code("int yAddToDatabase(string db = \"\", string val = \"\") {");
code("yDatabaseCreateIfNull(db);");
code("int id = trQuestVarGet(\"database\"+db);");
code("int next = xAddDatabaseBlock(id);");
code("yAddUpdateVar(db, \"unitName\", trQuestVarGet(val));");
code("return(next);");
code("}");
code("int yGetPointer(string db = \"\") {");
code("return(xGetPointer(1*trQuestVarGet(\"database\"+db)));");
code("}");
code("bool ySetPointer(string db = \"\", int index = 0) {");
code("bool safe = xSetPointer(1*trQuestVarGet(\"database\"+db), index);");
code("if (safe) {");
code("trQuestVarSet(db, yGetVar(db, \"unitName\"));");
code("}");
code("return(safe);");
code("}");
code("int yGetDatabaseCount(string db = \"\") {");
code("return(xGetDatabaseCount(1*trQuestVarGet(\"database\"+db)));");
code("}");
code("int yGetUnitAtIndex(string db = \"\", int index = 0) {");
code("return(1*yGetVarAtIndex(db, \"unitName\", index));");
code("}");
code("void ySetUnitAtIndex(string db = \"\", int index = 0, int value = 0) {");
code("ySetVarAtIndex(db, \"unitName\", value, index);");
code("}");
code("void ySetUnit(string db = \"\", int value = 0) {");
code("ySetVar(db, \"unitName\", value);");
code("}");
code("void yClearDatabase(string db = \"\") {");
code("xClearDatabase(1*trQuestVarGet(\"database\"+db));");
code("}");
code("int yFindLatestReverse(string qv = \"\", string proto = \"\", int p = 0) {");
code("int id = kbGetProtoUnitID(proto);");
code("trUnitSelectClear();");
code("for(x=trGetNextUnitScenarioNameNumber(); >trQuestVarGet(qv)) {");
code("int i = kbGetBlockID(\"\"+x, true);");
code("if (kbGetUnitBaseTypeID(i) == id) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(i);");
code("if (trUnitIsOwnedBy(p)) {");
code("trQuestVarSet(qv, x);");
code("return(i);");
code("}");
code("}");
code("}");
code("return(-1);");
code("}");
code("int yFindLatest(string qv = \"\", string proto = \"\", int p = 0) {");
code("int id = kbGetProtoUnitID(proto);");
code("trUnitSelectClear();");
code("int next = trGetNextUnitScenarioNameNumber() - 1;");
code("int current = trQuestVarGet(qv);");
code("while(next > current) {");
code("current = current + 1;");
code("int i = kbGetBlockID(\"\"+current, true);");
code("if (kbGetUnitBaseTypeID(i) == id) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(i);");
code("if (trUnitIsOwnedBy(p)) {");
code("trQuestVarSet(qv, current);");
code("return(i);");
code("}");
code("}");
code("}");
code("return(-1);");
code("}");
}
void helpersdataLoadBackend() {
code("int dSavedData = 0;");
code("int xSavedDataSize = 0;");
code("int xSavedDataSlot = 0;");
code("int xSavedDataDB = 0;");
code("int xSavedDataVar = 0;");
code("int dLocalData = 0;");
code("int xLocalDataSize = 0;");
code("int xLocalDataSlot = 0;");
code("int xLocalDataName = 0;");
code("int loadNumHumans = 0;");
code("int SavedDataArray = 0;");
code("int swordsmanCountArray = 0;");
code("int playerDataArray = 0;");
code("int loadProgress = 0;");
code("int totalLoad = 0;");
code("string NEXT_TRIGGER_NAME = \"\";");
code("void recordTotalSize(int slot = 0, int size = 0) {");
code("if (zGetInt(swordsmanCountArray, slot) == 0) {");
code("zSetInt(swordsmanCountArray, slot, size);");
code("} else {");
code("zSetInt(swordsmanCountArray, slot, size * zGetInt(swordsmanCountArray, slot));");
code("}");
code("}");
code("void addSavedDataDB(int destDB = 0, int destVar = 0, int slot = 0, int size = 1) {");
code("xAddDatabaseBlock(dSavedData, true);");
code("xSetInt(dSavedData, xSavedDataSize, size);");
code("xSetInt(dSavedData, xSavedDataSlot, slot);");
code("xSetInt(dSavedData, xSavedDataDB, destDB);");
code("xSetInt(dSavedData, xSavedDataVar, destVar);");
code("recordTotalSize(slot, size);");
code("}");
code("void addLocalDataQV(string qvName = \"\", int slot = 0, int size = 1) {");
code("xAddDatabaseBlock(dLocalData, true);");
code("xSetInt(dLocalData, xLocalDataSize, size);");
code("xSetInt(dLocalData, xLocalDataSlot, slot);");
code("xSetString(dLocalData, xLocalDataName, qvName);");
code("}");
code("void showLoadProgress() {");
code("trSoundPlayFN(\"default\",\"1\",-1,\"Loading Data:\"+100 * loadProgress / totalLoad,\"icons\god power reverse time icons 64\");");
code("}");
code("void saveAllData() {");
code("xsSetContextPlayer(0);");
code("int currentdata = 0;");
code("int slot = 0;");
code("int p = trCurrentPlayer();");
code("for(i=0; < 16) {");
code("zSetInt(SavedDataArray, i, 0);");
code("}");
code("xSetPointer(dSavedData, 1);");
code("for(i=xGetDatabaseCount(dSavedData); >0) {");
code("xDatabaseNext(dSavedData, true);");
code("slot = xGetInt(dSavedData, xSavedDataSlot);");
code("currentdata = xGetInt(xGetInt(dSavedData, xSavedDataDB), xGetInt(dSavedData, xSavedDataVar), p);");
code("currentdata = xsMax(0, currentdata);");
code("currentdata = xsMin(currentdata, xGetInt(dSavedData, xSavedDataSize) - 1);");
code("zSetInt(SavedDataArray, slot, zGetInt(SavedDataArray, slot) * xGetInt(dSavedData, xSavedDataSize) + currentdata);");
code("}");
code("xSetPointer(dLocalData, 1);");
code("for(i=xGetDatabaseCount(dLocalData); >0) {");
code("xDatabaseNext(dLocalData, true);");
code("slot = xGetInt(dLocalData, xLocalDataSlot);");
code("currentdata = trQuestVarGet(xGetString(dLocalData, xLocalDataName));");
code("currentdata = xsMax(0, currentdata);");
code("currentdata = xsMin(currentdata, xGetInt(dLocalData, xLocalDataSize) - 1);");
code("zSetInt(SavedDataArray, slot, zGetInt(SavedDataArray, slot) * xGetInt(dLocalData, xLocalDataSize) + currentdata);");
code("}");
code("for(i=0; < 16) {");
code("trSetCurrentScenarioUserData(i, zGetInt(SavedDataArray, i));");
code("}");
code("}");
code("void loadRawData() {");
code("xsSetContextPlayer(0);");
code("for(i=0; < 16) {");
code("zSetInt(SavedDataArray, i, trGetScenarioUserData(i));");
code("if (zGetInt(SavedDataArray, i) == -1) {");
code("zSetInt(SavedDataArray, i, 0);");
code("}");
code("}");
code("int slot = 0;");
code("int currentdata = 0;");
code("int val = 0;");
code("xSetPointer(dLocalData, 1);");
code("for(i=xGetDatabaseCount(dLocalData); >0) {");
code("slot = xGetInt(dLocalData, xLocalDataSlot);");
code("currentdata = zGetInt(SavedDataArray, slot);");
code("val = iModulo(xGetInt(dLocalData, xLocalDataSize), currentdata);");
code("zSetInt(SavedDataArray, slot, currentdata / xGetInt(dLocalData, xLocalDataSize));");
code("trQuestVarSet(xGetString(dLocalData, xLocalDataName), val);");
code("xDatabaseNext(dLocalData);");
code("}");
code("}");
code("void loadDataFromArray(int arrNum = 0, int p = 1) {");
code("int slot = xGetInt(dSavedData, xSavedDataSlot);");
code("int currentdata = zGetInt(arrNum, slot);");
code("int val = iModulo(xGetInt(dSavedData, xSavedDataSize), currentdata);");
code("zSetInt(arrNum, slot, currentdata / xGetInt(dSavedData, xSavedDataSize));");
code("xSetInt(xGetInt(dSavedData, xSavedDataDB), xGetInt(dSavedData, xSavedDataVar), val, p);");
code("}");
code("void loadAllDataMultiplayer() {");
code("xsSetContextPlayer(0);");
code("xSetPointer(dSavedData, 1);");
code("for(i=xGetDatabaseCount(dSavedData); >0) {");
code("for(p=1; < cNumberPlayers) {");
code("loadDataFromArray(zGetInt(playerDataArray, p), p);");
code("}");
code("xDatabaseNext(dSavedData);");
code("}");
code("}");
code("void loadAllDataSingleplayer() {");
code("xsSetContextPlayer(0);");
code("xSetPointer(dSavedData, 1);");
code("for(i=xGetDatabaseCount(dSavedData); >0) {");
code("loadDataFromArray(SavedDataArray);");
code("xDatabaseNext(dSavedData);");
code("}");
code("}");
code("rule data_load_00");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("xsEnableRule(\"setup_data\");");
code("trDelayedRuleActivation(\"data_load_01\");");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,0,0,true);");
code("dSavedData = xInitDatabase(\"SavedDataSegments\");");
code("xSavedDataSize = xInitAddInt(dSavedData, \"size\");");
code("xSavedDataSlot = xInitAddInt(dSavedData, \"slot\");");
code("xSavedDataDB = xInitAddInt(dSavedData, \"database\");");
code("xSavedDataVar = xInitAddInt(dSavedData, \"variable\");");
code("dLocalData = xInitDatabase(\"LocalDataSegments\");");
code("xLocalDataSize = xInitAddInt(dLocalData, \"size\");");
code("xLocalDataSlot = xInitAddInt(dLocalData, \"slot\");");
code("xLocalDataName = xInitAddString(dLocalData, \"name\");");
code("SavedDataArray = zNewArray(mInt, 16, \"SavedData\");");
code("if (aiIsMultiplayer()) {");
code("playerDataArray = zNewArray(mInt, cNumberPlayers, \"playerData\");");
code("swordsmanCountArray = zNewArray(mInt, 16, \"swordsmanCount\");");
code("for(i=0; < 16) {");
code("zSetInt(swordsmanCountArray, i, 0);");
code("}");
code("for(p=1; < cNumberPlayers) {");
code("zSetInt(playerDataArray, p, zNewArray(mInt, 16, \"p\"+p+\"data\"));");
code("trModifyProtounit(\"Swordsman\", p, 55, 4);");
code("trModifyProtounit(\"Swordsman\", p, 2, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman\", p, 2, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman\", p, 2, 0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 2, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 2, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 2, 0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 6, -100);");
code("trModifyProtounit(\"Swordsman Hero\", p, 16, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 17, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 18, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 19, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 16, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 17, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 18, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 19, -9999999999999999999.0);");
code("trArmyDispatch(\"\"+p+\",0\",\"Swordsman\", 32, 1 + 2 * p,0,1,0,true);");
code("if (kbIsPlayerHuman(p)) {");
code("loadNumHumans = 1 + loadNumHumans;");
code("}");
code("}");
code("for(p=1; < cNumberPlayers) {");
code("trArmyDispatch(\"\"+p+\",0\",\"Victory Marker\", 1, 1, 0, 1, 0, true);");
code("}");
code("}");
code("}");
code("int currentSwordsmanSlot = 0;");
code("int currentSwordsmanMultiplier = 1;");
code("int currentSwordsmanData = 0;");
code("rule data_load_01");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("loadRawData();");
code("if (aiIsMultiplayer()) {");
code("xsEnableRule(\"data_load_02_send_data\");");
code("xsEnableRule(\"data_load_03_receive_data\");");
code("for(i=0; < 16) {");
code("int swordsmen = 0;");
code("for(j=0; < 6) {");
code("if (zGetInt(swordsmanCountArray, i) > 0) {");
code("zSetInt(swordsmanCountArray, i, zGetInt(swordsmanCountArray, i) / 32);");
code("swordsmen = swordsmen + 1;");
code("} else {");
code("break;");
code("}");
code("}");
code("zSetInt(swordsmanCountArray, i, swordsmen);");
code("totalLoad = totalLoad + swordsmen;");
code("for(p=0; < cNumberPlayers) {");
code("zSetInt(zGetInt(playerDataArray, p), i, 0);");
code("}");
code("}");
code("} else {");
code("loadAllDataSingleplayer();");
code("xsEnableRule(NEXT_TRIGGER_NAME);");
code("}");
code("}");
code("rule data_load_02_send_data");
code("inactive");
code("highFrequency");
code("{");
code("for(i=currentSwordsmanSlot; < 16) {");
code("if (zGetInt(swordsmanCountArray, i) > 0) {");
code("zSetInt(swordsmanCountArray, i, zGetInt(swordsmanCountArray, i) - 1);");
code("currentSwordsmanData = iModulo(32, zGetInt(SavedDataArray, i));");
code("zSetInt(SavedDataArray, i, zGetInt(SavedDataArray, i) / 32);");
code("currentSwordsmanSlot = i;");
code("break;");
code("} else {");
code("currentSwordsmanMultiplier = 1;");
code("}");
code("}");
code("trLetterBox(false);");
code("trBlockAllSounds(true);");
code("trUnitSelectClear();");
code("trUnitSelectByID(currentSwordsmanData + 32 * (trCurrentPlayer() - 1));");
code("for(i=32; >0) {");
code("if (trUnitIsSelected() == false) {");
code("uiFindType(\"Swordsman\");");
code("} else {");
code("break;");
code("}");
code("}");
code("uiTransformSelectedUnit(\"Swordsman Hero\");");
code("trForceNonCinematicModels(true);");
code("trLetterBox(true);");
code("showLoadProgress();");
code("xsDisableSelf();");
code("}");
code("rule data_load_03_receive_data");
code("inactive");
code("highFrequency");
code("{");
code("int swordsmen = 0;");
code("int currentdata = 0;");
code("for(p=1; < cNumberPlayers) {");
code("swordsmen = swordsmen + trPlayerUnitCountSpecific(p, \"Swordsman Hero\");");
code("}");
code("if (swordsmen == loadNumHumans) {");
code("for(p=1; < cNumberPlayers) {");
code("swordsmen = 32 * (p - 1);");
code("for(x=0; < 32) {");
code("if (kbGetUnitBaseTypeID(x + swordsmen) == kbGetProtoUnitID(\"Swordsman Hero\")) {");
code("currentdata = zGetInt(zGetInt(playerDataArray, p), currentSwordsmanSlot) + currentSwordsmanMultiplier * x;");
code("zSetInt(zGetInt(playerDataArray, p), currentSwordsmanSlot, currentdata);");
code("trUnitSelectClear();");
code("trUnitSelectByID(x + swordsmen);");
code("trMutateSelected(kbGetProtoUnitID(\"Swordsman\"));");
code("break;");
code("}");
code("}");
code("}");
code("loadProgress = loadProgress + 1;");
code("currentSwordsmanMultiplier = currentSwordsmanMultiplier * 32;");
code("if (loadProgress == totalLoad) {");
code("xsEnableRule(\"data_load_04_parse_data\");");
code("xsDisableSelf();");
code("} else {");
code("xsEnableRule(\"data_load_02_send_data\");");
code("}");
code("showLoadProgress();");
code("}");
code("}");
code("rule data_load_04_parse_data");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("int slot = 0;");
code("int currentdata = 0;");
code("for(i=0; < 32 * (cNumberPlayers - 1)) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(i);");
code("trUnitDestroy();");
code("}");
code("loadAllDataMultiplayer();");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("xsEnableRule(NEXT_TRIGGER_NAME);");
code("}");
}
void setup() {
code("int dPlayerData = 0;");
code("int xPlayerHealth = 0;");
code("int xPlayerFood = 0;");
code("int xPlayerWood = 0;");
code("int xPlayerGold = 0;");
code("rule did_it_work");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trUIFadeToColor(0,0,0,1000,1000,false);");
code("trLetterBox(false);");
code("for(i=xGetDatabaseCount(dPlayerData); >0) {");
code("xDatabaseNext(dPlayerData);");
code("xPrintAll(dPlayerData, xGetPointer(dPlayerData));");
code("}");
code("trChatSend(0, \"Example: \" + trQuestVarGet(\"example\"));");
code("trQuestVarSet(\"end\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Pegasus\",1,1,0,1,0,true);");
code("trArmyDispatch(\"0,0\", \"Gold Mine\", 1, 11, 0, 15, 0, true);");
code("trArmyDispatch(\"0,0\", \"Berry Bush\", 1, 15, 0, 15, 0, true);");
code("trArmyDispatch(\"0,0\", \"Palm\", 1, 19, 0, 15, 0, true);");
code("trSetFogAndBlackmap(false, false);");
code("for(p=1; < cNumberPlayers) {");
code("trModifyProtounit(\"Villager Atlantean\", p, 0, 840);");
code("trPlayerGrantResources(p, \"food\", xGetInt(dPlayerData, xPlayerFood, p) - trPlayerResourceCount(p, \"food\"));");
code("trPlayerGrantResources(p, \"wood\", xGetInt(dPlayerData, xPlayerWood, p) - trPlayerResourceCount(p, \"wood\"));");
code("trPlayerGrantResources(p, \"gold\", xGetInt(dPlayerData, xPlayerGold, p) - trPlayerResourceCount(p, \"gold\"));");
code("trQuestVarSet(\"p\"+p+\"villager\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Villager Atlantean\",1, 5 + 2 * p, 0, 3, 0, true);");
code("float health = xGetInt(dPlayerData, xPlayerHealth, p);");
code("if (health <= 0) {");
code("health = 999;");
code("xSetInt(dPlayerData, xPlayerHealth, p);");
code("}");
code("trArmySelect(\"\"+p+\",0\");");
code("xsSetContextPlayer(p);");
code("trDamageUnit(kbUnitGetCurrentHitpoints(kbGetBlockID(\"\"+1*trQuestVarGet(\"p\"+p+\"villager\"))) - health);");
code("xsSetContextPlayer(0);");
code("}");
code("xsEnableRule(\"end_it_all\");");
code("}");
code("rule end_it_all");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"end\");");
code("if (trUnitAlive() == false) {");
code("int p = trCurrentPlayer();");
code("xSetPointer(dPlayerData, p);");
code("xSetInt(dPlayerData, xPlayerGold, trPlayerResourceCount(p, \"gold\"));");
code("xSetInt(dPlayerData, xPlayerWood, trPlayerResourceCount(p, \"wood\"));");
code("xSetInt(dPlayerData, xPlayerFood, trPlayerResourceCount(p, \"food\"));");
code("xsSetContextPlayer(p);");
code("float health = kbUnitGetCurrentHitpoints(kbGetBlockID(\"\"+1*trQuestVarGet(\"p\"+p+\"villager\")));");
code("xsSetContextPlayer(0);");
code("xSetInt(dPlayerData, xPlayerHealth, health);");
code("xPrintAll(dPlayerData, p);");
code("saveAllData();");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("xsDisableSelf();");
code("} else if (trUnitIsSelected() && (trTime() > trQuestVarGet(\"upNext\"))) {");
code("trQuestVarSet(\"upNext\", trTime());");
code("trQuestVarSet(\"example\", 1 + trQuestVarGet(\"example\"));");
code("trChatSend(0, \"Example: \" + trQuestVarGet(\"example\"));");
code("}");
code("}");
code("rule init_db");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("int playerCount = cNumberPlayers - 1;");
code("dPlayerData = xInitDatabase(\"playerData\", playerCount);");
code("xPlayerHealth = xInitAddInt(dPlayerData, \"health\");");
code("xPlayerFood = xInitAddInt(dPlayerData, \"food\");");
code("xPlayerWood = xInitAddInt(dPlayerData, \"wood\");");
code("xPlayerGold = xInitAddInt(dPlayerData, \"gold\");");
code("for(p=0; < playerCount) {");
code("xAddDatabaseBlock(dPlayerData);");
code("}");
code("}");
}
void helpersdataLoadModifyMe() {
code("rule setup_data");
code("inactive");
code("highFrequency");
code("{");
code("NEXT_TRIGGER_NAME = \"did_it_work\";");
code("addLocalDataQV(\"example\", 0, 1000);");
code("addSavedDataDB(dPlayerData, xPlayerHealth, 1, 1000);");
code("addSavedDataDB(dPlayerData, xPlayerGold, 2, 1000);");
code("addSavedDataDB(dPlayerData, xPlayerFood, 2, 1000);");
code("addSavedDataDB(dPlayerData, xPlayerWood, 3, 1000);");
code("xsDisableSelf();");
code("}");
}
void main(void) {
rmSetStatusText("", 0.01);
rmSetMapSize(50, 50);
rmSetSeaLevel(0);
rmSetSeaType("greek river");
rmTerrainInitialize("OlympusA",1);
rmSetGaiaCiv(cCivZeus);
rmSetLightingSet("Default");
rmSetStatusText("", 0.1);
rmSwitchToTrigger(rmCreateTrigger("zenowashere"));
rmSetTriggerPriority(4);
rmSetTriggerActive(false);
rmSetTriggerLoop(false);
rmSetTriggerRunImmediately(true);
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");}}/*");
helperszshared();
helpersdataLoadBackend();
setup();
helpersdataLoadModifyMe();
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");*/rule _zenowashereagain inactive {if(true){xsDisableSelf();//");
rmSetStatusText("", 0.99);}